import node


def rand_weight(max_weight):
    return max_weight


def create_graph(n):
    print("Creating Graph")

    counter = 1
    nodes = []

    for x in range(0, n):
        cols = []
        for y in range(0, n):
            cols.append(node.MyNode(str(counter)))
            counter += 1
        nodes.append(cols)
    # ni: node.MyNode = nodes[1][0]
    # print(ni.name)

    # Set connections
    for x in range(0, n):

        for y in range(0, n):

            temp: node.MyNode = nodes[x][y]
            print("x: " + str(x) + " y: " + str(y))
            print("Setting : " + temp.name)

            # Does not go up
            if x == 0:

                # Does not go left AND does not go up
                if y == 0:
                    print("x==0 Does not go left AND does not go up")
                    temp.right = nodes[x][y+1]
                    temp.weight_right = rand_weight(10)
                    temp.down = nodes[x+1][y]
                    temp.weight_down = rand_weight(10)

                # Does not go right AND does not go up
                elif y == n - 1:
                    print("x==0 Does not go right AND does not go up")
                    temp.down = nodes[x+1][y]
                    temp.weight_down = rand_weight(10)

                # General case, Does not go up AND goes left AND right
                else:
                    print("x==0 General case, Does not go up AND goes left AND right")
                    temp.right = nodes[x][y+1]
                    temp.weight_right = rand_weight(10)
                    temp.down = nodes[x+1][y]
                    temp.weight_down = rand_weight(10)

            # Does not go down
            elif x == n - 1:
                pass

            # General case
            else:
                if y == n - 1:
                    print("General - Does not go right AND does not go up")
                    temp.down = nodes[x+1][y]
                    temp.weight_down = rand_weight(10)
                else :
                    print("General - General case")
                    temp.right = nodes[x][y + 1]
                    temp.weight_right = rand_weight(10)
                    temp.down = nodes[x + 1][y]
                    temp.weight_down = rand_weight(10)


def calc_distance(x, y):
    print("Calculating Manhattan Distance")


n: int = int(input("Enter n: "))
'''
p: int = int(input("Enter p: "))
p = p * 2 * n * (n - 1)
max_w: int = input("Enter max: ")
'''
create_graph(n)
pi = node.MyNode("bob")
